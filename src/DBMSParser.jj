options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(DBMSParser)

import java.util.ArrayList;

public class DBMSParser
{
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;
  public static final int PRINT_SHOW_TABLES = 4;
  public static final int PRINT_SELECT = 5;
  public static final int PRINT_INSERT = 6;
  public static final int PRINT_DELETE = 7;
  public static final String CONSOLE_STR = "DB_2013-11384> ";

  public static DBMSController ctrl;
  
  public static void main(String args[]) throws ParseException
  {
    ctrl = new DBMSController();
    DBMSParser parser = new DBMSParser(System.in);
    
    while (true)
    {
      try
      {
        System.out.print(CONSOLE_STR);
        parser.command();
      } catch (ParseException e) {
        if(e.getMessage() != "hoho") {
          printMessage(PRINT_SYNTAX_ERROR);
        }
        DBMSParser.ReInit(System.in);
      }
      catch (Exception e)
      {
        System.out.println(e);
        e.printStackTrace();
		DBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(int q)
  {
//    
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
      	System.out.println("Syntax error");
      	break;
      case PRINT_CREATE_TABLE:
      	// System.out.println("\'CREATE TABLE\' requested");
      	break;
      case PRINT_DROP_TABLE:
      	// System.out.println("\'DROP TABLE\' requested");
      	break;
      case PRINT_DESC:
      	// System.out.println("\'DESC\' requested");
      	break;
      case PRINT_SHOW_TABLES:
      	// System.out.println("\'SHOW TABLES\' requested");
      	break;
      case PRINT_SELECT:
      	System.out.println("\'SELECT\' requested");
      	break;
      case PRINT_INSERT:
      	// System.out.println("\'INSERT\' requested");
      	break;
      case PRINT_DELETE:
      	// System.out.println("\'DELETE\' requested");
      	break;     	
    }
  }
}

PARSER_END(DBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

// note that keywords has to one-word
TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE : "create" >
| < TABLE : "table" >
| < DROP : "drop" >
| < DESC : "desc" >
| < SHOW : "show" >
| < TABLES : "tables" >
| < SELECT : "select" >
| < INSERT : "insert" >
| < INTO : "into" >
| < VALUES : "values" >
| < DELETE : "delete" >
| < PRIMARY : "primary" >
| < FOREIGN : "foreign" >
| < KEY : "key" >
| < REFERENCES : "references" >
| < FROM : "from" >
| < WHERE : "where" >
| < IS : "is" >
| < NULL : "null" >
| < NOT : "not" >
| < AND : "and" >
| < OR : "or" >
| < AS : "as" >
}

TOKEN :
{
  < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE >>
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>
| < DATE_VALUE : < NNNN > < DASH > < NN > < DASH > < NN >>
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < PERIOD : "." >
| < UNDERSCORE : "_" >
| < DASH : "-" >
| < ASTERISK : "*" >
| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >
| < SIGN : "+" | "-" >
| < NNNN : < DIGIT >< DIGIT >< DIGIT >< DIGIT >>
| < NN : < DIGIT >< DIGIT >>
| < DIGIT : [ "0"-"9" ] >
| < ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < QUOTE : "'" >
| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET >
						| < NON_QUOTE_SPECIAL_CHARACTERS > | " ">
| < NON_QUOTE_SPECIAL_CHARACTERS : ["`", "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+", "[", "{", "]", "}", "\\", "|", ";", ":", ",", "<", ".", ">", "/","?"]>
}

void command() :
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      ctrl.close();
      System.exit(0);
    }
  ) 
}

void queryList() :
{
  int q;
}
{
  (
    q = query()
    < SEMICOLON >
    {
      System.out.print(CONSOLE_STR);
      printMessage(q);
    }
  )+
}

int query() :
{
  int q;
}
{
  (
  	createTableQuery()
    {
      q = PRINT_CREATE_TABLE;
    }
  |
  	dropTableQuery()
    {
      q = PRINT_DROP_TABLE;
    }
  |
    descQuery()
    {
      q = PRINT_DESC;
    }
  |
    showTablesQuery()
    {
      q = PRINT_SHOW_TABLES;
    }
  |
    selectQuery()
    {
      q = PRINT_SELECT;
    }
  |
    insertQuery()
    {
      q = PRINT_INSERT;
    }
  |
    deleteQuery()
    {
      q = PRINT_DELETE;
    } 
  )
  (
    {
      return q;
    }
  )
}

void deleteQuery() :
{
  String s;
  Table t;
  WhereController.MyWhereClause wc = null;
}
{
  < DELETE >
  < FROM >
  s = tableName()
  (
    wc = whereClause()
  )?
  {
    if(!ctrl.isTableExist(s))
    {
      System.out.println(DBMSException.getMessage(9, null));
      throw new ParseException("hohoho");
    }
    t = ctrl.getTableByName(s);
    t.delete(wc);
  }
}

void insertQuery() :
{
  String s;
  Table t;
}
{
  < INSERT >
  < INTO >
  s = tableName()
  {
    if(!ctrl.isTableExist(s))
    {
      System.out.println(DBMSException.getMessage(9, null));
      throw new ParseException("hohoho");
    }
    t = ctrl.getTableByName(s);
  }
  insertColumnsAndSource(t)
}

void insertColumnsAndSource(Table t) :
{
  ArrayList<String> clist = null;
  ArrayList<String> vlist;
}
{
  (
    clist = columnNameList()
  )?
  vlist = valueList()
  {
    t.insertInto(clist, vlist);
  }
}

ArrayList<String> valueList() :
{
  ArrayList<String> vlist = new ArrayList<String>();
  String s;
}
{
  < VALUES >
  < LEFT_PAREN >
  s = value()
  {
    vlist.add(s);
  }
  (
    < COMMA >
    s = value()
    {
      vlist.add(s);
    }
  )*
  < RIGHT_PAREN >
  {
    return vlist;
  }
}

String value() :
{
  String s;
}
{
  < NULL >
  {
    return null;
  }
| s = comparableValue()
{
  return s;
}
}

void selectQuery() :
{}
{
  < SELECT >
  selectList()
  tableExpression()
}

void selectList() :
{}
{
  < ASTERISK >
| selectedColumn()
(
  < COMMA >
  selectedColumn()
)*
}

void selectedColumn() :
{}
{
  (
    LOOKAHEAD(2)
    tableName()
    < PERIOD >
  )?
  columnName()
  (
    < AS >
    columnName()
  )?
}

void tableExpression() :
{}
{
  fromClause()
  (
    whereClause()
  )?
}

void fromClause() :
{}
{
  < FROM >
  tableReferenceList()
}

void tableReferenceList() :
{}
{
  referedTable()
  (
    < COMMA >
    referedTable()
  )*
}

void referedTable() :
{}
{
  tableName()
  (
    < AS >
    tableName()
  )?
}

WhereController.MyWhereClause whereClause() :
{
  WhereController.MyWhereClause wc = new WhereController.MyWhereClause();
  WhereController.BooleanValueExpression bve;
}
{
  < WHERE >
  bve = booleanValueExpression()
  {
    wc.setBooleanValueExpression(bve);
    return wc;
  }
}

WhereController.BooleanValueExpression booleanValueExpression() :
{
  WhereController.BooleanValueExpression bve = new WhereController.BooleanValueExpression();
  WhereController.BooleanTerm bt;
}
{
  bt = booleanTerm()
  {
    bve.add(bt);
  }
  (
    < OR >
    bt = booleanTerm()
    {
      bve.add(bt);
    }
  )*
  {
    return bve;
  }
}

WhereController.BooleanTerm booleanTerm() :
{
  WhereController.BooleanTerm bt = new WhereController.BooleanTerm();
  WhereController.BooleanFactor bf;
}
{
  bf = booleanFactor()
  {
    bt.add(bf);
  }
  (
    < AND >
    bf = booleanFactor()
    {
      bt.add(bf);
    }
  )*
  {
    return bt;
  }
}

WhereController.BooleanFactor booleanFactor() :
{
  WhereController.BooleanFactor bf = new WhereController.BooleanFactor();
}
{
  (
    < NOT >
    {
      bf.setIsNot();
    }
  )?
  booleanTest(bf)
  {
    return bf;
  }
}

void booleanTest(WhereController.BooleanFactor bf) :
{}
{
  (
    predicate(bf)
  | parenthesizedBooleanExpression(bf)
  )
}

void parenthesizedBooleanExpression(WhereController.BooleanFactor bf) :
{
  WhereController.ParenthesizedBooleanExpression pbe = new WhereController.ParenthesizedBooleanExpression();
  WhereController.BooleanValueExpression bve;
}
{
 < LEFT_PAREN >
 bve = booleanValueExpression()
 < RIGHT_PAREN >
 {
   pbe.setBooleanValueExpression(bve);
   bf.setBooleanTest(pbe);
 }
}

void predicate(WhereController.BooleanFactor bf) :
{
}
{
  (
    // A common prefix is : < LEGAL_IDENTIFIER > "."
    // so need to using a lookahead of 3 or more
    // above is compiler's recommend, but the common prefix can be 3 tokens as
    // <TABLE NAME > <PERIOD > <COLUMN NAME >,  so we need to lookahead at least 4.
    LOOKAHEAD(4)
    comparisonPredicate(bf)
  | nullPredicate(bf)
  )
}

void comparisonPredicate(WhereController.BooleanFactor bf) :
{
  WhereController.ComparisonPredicate cp = new WhereController.ComparisonPredicate();
  WhereController.CompOperand lcp = new WhereController.CompOperand();
  WhereController.CompOperand rcp = new WhereController.CompOperand();
  Token t;
}
{
  lcp = compOperand()
  t = < COMP_OP >
  rcp = compOperand()
  {
    cp.setLeft(lcp);
    cp.setOp(t.toString());
    cp.setRight(rcp);
    bf.setBooleanTest(cp);
  }
}

WhereController.CompOperand compOperand() :
{
  WhereController.CompOperand cp = new WhereController.CompOperand();
  String v;
  String t;
  String c;
}
{
  v = comparableValue()
  {
    cp.setComparableValue(v);
    return cp;
  }
| (
    (
     // common prefixex is <LEGAL_IDENTIFIER >
     // so using a lookahead of 2 or more
      LOOKAHEAD(2)
      t = tableName()
      < PERIOD >
      {
        cp.setTableName(t);
      }
    )?
    c = columnName()
    {
      cp.setColumnName(c);
      return cp;
    }
  )
}

String comparableValue() :
{
  Token t;
}
{
  (   
  t = < INT_VALUE >
  {
  return "1" + t.toString();
  }
| t = < CHAR_STRING >
  {
  return "2" + t.toString();
  }
| t = < DATE_VALUE >
  {
  return "3" + t.toString();
  }
  )
}

boolean nullOperation() :
{
  boolean flag = true;
}
{
  < IS >
  (
    < NOT >
    {
      flag = false;
    }
  )?
  < NULL >
  {
    return flag;
  }
}

void nullPredicate(WhereController.BooleanFactor bf) :
{
  WhereController.NullPredicate np = new WhereController.NullPredicate();
  String t;
  String c;
  boolean f;
}
{
  (
    // common prefixex is <LEGAL_IDENTIFIER >
    // so using a lookahead of 2 or more
    LOOKAHEAD(2)
    t = tableName()
    < PERIOD >
    {
      np.setTableName(t);
    }
  )?
  c = columnName()
  f = nullOperation()
  {
    np.setColumnName(c);
    if(f) np.setIsNull();
    bf.setBooleanTest(np);
  } 
}


void showTablesQuery() :
{}
{
  < SHOW >
  < TABLES >
  {
    ctrl.showTables();
  }
}

void descQuery() :
{
  String n;
}
{
  < DESC >
  n = tableName()
  {
    ctrl.descTable(n);
  }
}

void dropTableQuery() :
{
  String n;
}
{
  < DROP >
  < TABLE >
  n = tableName()
  {
    ctrl.dropTable(n);
  }    
}

void createTableQuery() :
{
  String s;
  Table t;
}
{
  < CREATE >
  < TABLE >
  s = tableName()
  {
    t = new Table(s, ctrl);
  }
  tableElementList(t)
  {
    ctrl.createTable(t);
  }
}

void tableElementList(Table t) :
{}
{
  < LEFT_PAREN >
  tableElement(t)
  (
    < COMMA >
    tableElement(t)
  )*
  < RIGHT_PAREN >
}

void tableElement(Table t) :
{
  Column c;
}
{
  c = columnDefinition()
  {
    t.addColumn(c);
  }
| tableConstraintDefinition(t)
}

Column columnDefinition() :
{
  String n;
  Column c;
}
{
  n = columnName()
  {
    c = new Column(n);
  }
  dataType(c)
  (
    < NOT >
    < NULL >
    {
      c.is_not_null = true;
    }
  )?
  {
    return c;
  }
}

void tableConstraintDefinition(Table t) :
{}
{
  primaryKeyConstraint(t)
| referentialConstraint(t)
}

void primaryKeyConstraint(Table t) :
{
  ArrayList<String> l;
}
{
  < PRIMARY >
  < KEY >
  l = columnNameList()
  {
    t.addPrimaryKeyConstraint(l);
  }
}

void referentialConstraint(Table t) :
{
  ArrayList<String> fl;
  String n;
  ArrayList<String> rl;
}
{
  < FOREIGN >
  < KEY >
  fl = columnNameList()
  < REFERENCES >
  n = tableName()
  rl = columnNameList()
  {
    t.addReferentialConstraint(fl, n, rl);
  }
}

ArrayList<String> columnNameList() :
{
  String n;
  ArrayList<String> l = new ArrayList<String>();
}
{
  < LEFT_PAREN >
  n = columnName()
  {
    l.add(n);
  }    
  (
    < COMMA >
    n = columnName()
    {
      l.add(n);
    }
  )*
  < RIGHT_PAREN >
  {
    return l;
  }
}

void dataType(Column c) :
{
  Token t;
}
{
  < INT >
  {
    c.type = 1;
  }
| (
    < CHAR >
    < LEFT_PAREN >
    t = < INT_VALUE >
    < RIGHT_PAREN >
    {
      c.type = 2;
      c.char_length = Integer.parseInt(t.toString());
    }
  )
| < DATE >
{
  c.type = 3;
}
}

String tableName() :
{
  Token t;
}
{
  t = < LEGAL_IDENTIFIER >
  {
    return t.toString().toLowerCase();
  }  
}

String columnName() :
{
  Token t;
}
{
    t = < LEGAL_IDENTIFIER >
    {
      return t.toString().toLowerCase();
    }
}
